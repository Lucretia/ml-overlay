commit e69a14827d756203cd5776b91458da873e25be18
Author: Vincent Bernardoff <vb@luminar.eu.org>
Date:   Tue Nov 21 18:55:32 2017 +0100

    fix compilation async dev

diff --git a/cohttp-async/bin/cohttp_curl_async.ml b/cohttp-async/bin/cohttp_curl_async.ml
index 3d2125b..526254e 100644
--- a/cohttp-async/bin/cohttp_curl_async.ml
+++ b/cohttp-async/bin/cohttp_curl_async.ml
@@ -39,7 +39,7 @@ let _ =
   Logs.set_level @@ Some Logs.Debug;
   Logs.set_reporter (Logs_fmt.reporter ());
   let open Command.Spec in
-  Command.async ~summary:"Fetch URL and print it"
+  Command.async_spec ~summary:"Fetch URL and print it"
     (empty
      +> anon ("url" %: string)
      +> flag "-X" (optional_with_default "GET" string)
diff --git a/cohttp-async/bin/cohttp_server_async.ml b/cohttp-async/bin/cohttp_server_async.ml
index 4d1cab4..8e808ad 100644
--- a/cohttp-async/bin/cohttp_server_async.ml
+++ b/cohttp-async/bin/cohttp_server_async.ml
@@ -120,14 +120,14 @@ let start_server docroot port index cert_file key_file verbose () =
         Logs.err (fun f -> f "Error from %s" (Socket.Address.to_string addr));
         Logs.err (fun f -> f "%s" @@ Exn.to_string exn)))
     ~mode
-    (Tcp.on_port port)
+    (Tcp.Where_to_listen.of_port port)
     (handler ~info ~docroot ~index) >>= fun _serv ->
   Deferred.never ()
 
 let () =
   let open Command in
   run @@
-  async ~summary:"Serve the local directory contents via HTTP or HTTPS"
+  async_spec ~summary:"Serve the local directory contents via HTTP or HTTPS"
     Spec.(
       empty
       +> anon (maybe_with_default "." ("docroot" %: string))
diff --git a/cohttp-async/src/io.ml b/cohttp-async/src/io.ml
index c15ccc2..3e6e077 100644
--- a/cohttp-async/src/io.ml
+++ b/cohttp-async/src/io.ml
@@ -81,9 +81,9 @@ let read_line =
     )
 
 let read ic len =
-  let buf = String.create len in
+  let buf = Bytes.create len in
   Reader.read ic ~len buf >>| function
-  | `Ok len' -> String.sub buf ~pos:0 ~len:len'
+  | `Ok len' -> Bytes.To_string.sub buf ~pos:0 ~len:len'
   | `Eof -> ""
 
 let write =
diff --git a/cohttp-async/src/server.ml b/cohttp-async/src/server.ml
index 9cee0a5..98bebc4 100644
--- a/cohttp-async/src/server.ml
+++ b/cohttp-async/src/server.ml
@@ -104,10 +104,10 @@ let respond_with_file ?flush ?headers ?(error_body=error_body_default) filename
   |Ok res -> return res
   |Error _exn -> respond_string ~status:`Not_found error_body
 
-let create ?max_connections ?buffer_age_limit ?on_handler_error
-    ?(mode=`TCP) where_to_listen handle_request =
+let create ?max_connections ?buffer_age_limit ?(mode=`TCP)
+    ~on_handler_error where_to_listen handle_request =
   Conduit_async.serve ?max_connections
-    ?buffer_age_limit ?on_handler_error mode
+    ?buffer_age_limit ~on_handler_error mode
     where_to_listen (handle_client handle_request)
   >>| fun server ->
   { server }
diff --git a/cohttp-async/src/server.mli b/cohttp-async/src/server.mli
index a8a7fbe..0736cd1 100644
--- a/cohttp-async/src/server.mli
+++ b/cohttp-async/src/server.mli
@@ -55,10 +55,10 @@ val respond_with_file :
 val create :
   ?max_connections:int ->
   ?buffer_age_limit: Writer.buffer_age_limit ->
-  ?on_handler_error:[ `Call of 'address -> exn  -> unit
-                    | `Ignore
-                    | `Raise ] ->
   ?mode:Conduit_async.server ->
+  on_handler_error:[ `Call of 'address -> exn  -> unit
+                   | `Ignore
+                   | `Raise ] ->
   ('address, 'listening_on) Tcp.Where_to_listen.t
   -> (body:Body.t -> 'address -> Request.t -> response Deferred.t)
   -> ('address, 'listening_on) t Deferred.t
