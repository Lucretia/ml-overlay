Index: deriving-0.7.1/lib/deriving_Dump.ml
===================================================================
--- deriving-0.7.1.orig/lib/deriving_Dump.ml
+++ deriving-0.7.1/lib/deriving_Dump.ml
@@ -142,7 +142,7 @@ module Dump_string = Defaults (
         for i = 0 to len - 1 do
           Bytes.unsafe_set s i (Stream.next stream)
         done;
-        s
+        Bytes.to_string s
   end
 )
 
@@ -251,6 +251,6 @@ module Dump_via_marshal (P : sig type a
       in
       let header = readn Marshal.header_size in
       let datasize = Marshal.data_size header 0 in
-      let datapart = readn datasize in
-        Marshal.from_string (header ^ datapart) 0
+      let datapart = Bytes.to_string (readn datasize) in
+        Marshal.from_string ((Bytes.to_string header) ^ datapart) 0
   end)
Index: deriving-0.7.1/lib/deriving_interned.ml
===================================================================
--- deriving-0.7.1.orig/lib/deriving_interned.ml
+++ deriving-0.7.1/lib/deriving_interned.ml
@@ -14,15 +14,15 @@ type t = int * string
     deriving (Show)
 
 let intern s =
-  try BytesMap.find s !map
+  try BytesMap.find (Bytes.of_string s) !map
   with Not_found ->
-    let fresh = (!counter, Bytes.of_string s) in begin
-      map := BytesMap.add s fresh !map;
+    let fresh = (!counter, s) in begin
+      map := BytesMap.add (Bytes.of_string s) fresh !map;
       incr counter;
       fresh
     end
 
-let to_string (_,s) = Bytes.to_string s
+let to_string (_,s) = s
 let name = snd
 let compare (l,_) (r,_) = compare l r
 let eq (l,_) (r,_) = l = r
Index: deriving-0.7.1/syntax/common/utils.ml
===================================================================
--- deriving-0.7.1.orig/syntax/common/utils.ml
+++ deriving-0.7.1/syntax/common/utils.ml
@@ -216,7 +216,7 @@ let random_id length =
     for i = 0 to length - 1 do
       Bytes.set s i idchars.[Random.int nidchars]
     done;
-    s
+    Bytes.to_string s
 
 (* The function used in OCaml to convert variant labels to their
    integer representations.  The formula is given in Jacques
