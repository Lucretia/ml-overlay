commit 4bbf6907f3026840652b86ad344674ddc8de131c
Author: Gabriel Scherer <gabriel.scherer@gmail.com>
Date:   Tue Apr 19 08:46:41 2016 -0400

    safe-string: make Pervasives safe

diff --git a/src/batPervasives.ml b/src/batPervasives.ml
index 578e1d32..c2a82945 100644
--- a/src/batPervasives.ml
+++ b/src/batPervasives.ml
@@ -58,13 +58,13 @@ let input_all ic =
     if n = 0 then
       let res = Bytes.create total in
       let pos = total - ofs in
-      let _ = String.blit buf 0 res pos ofs in
+      let _ = Bytes.blit buf 0 res pos ofs in
       let coll pos buf =
         let new_pos = pos - buf_len in
-        String.blit buf 0 res new_pos buf_len;
+        Bytes.blit buf 0 res new_pos buf_len;
         new_pos in
       let _ = List.fold_left coll pos acc in
-      res
+      Bytes.unsafe_to_string res
     else
       let new_ofs = ofs + n in
       let new_total = total + n in
@@ -213,6 +213,8 @@ let output_char       = BatChar.print
 let output_string     = BatString.print
 let output oc buf pos len =
   ignore (BatIO.output oc buf pos len)
+let output_substring oc buf pos len =
+  ignore (BatIO.output_substring oc buf pos len)
 let output_byte       = BatIO.write_byte
 let output_binary_int = BatIO.write_i32
 let output_binary_float out v= BatIO.write_i64 out (BatInt64.bits_of_float v)
diff --git a/src/batPervasives.mliv b/src/batPervasives.mliv
index 062076bb..9bb1aee0 100644
--- a/src/batPervasives.mliv
+++ b/src/batPervasives.mliv
@@ -221,8 +221,14 @@ val output_char : unit BatIO.output -> char -> unit
 val output_string : unit BatIO.output -> string -> unit
 (** Write the string on the given output channel. *)
 
-val output : unit BatIO.output -> string -> int -> int -> unit
-(** [output oc buf pos len] writes [len] characters from string [buf],
+val output : unit BatIO.output -> Bytes.t -> int -> int -> unit
+(** [output oc buf pos len] writes [len] characters from byte sequence [buf],
+    starting at offset [pos], to the given output channel [oc].
+    @raise Invalid_argument if [pos] and [len] do not
+    designate a valid subsequence of [buf]. *)
+
+val output_substring : unit BatIO.output -> string -> int -> int -> unit
+(** [output_substring oc buf pos len] writes [len] characters from string [buf],
     starting at offset [pos], to the given output channel [oc].
     @raise Invalid_argument if [pos] and [len] do not
     designate a valid substring of [buf]. *)
@@ -319,9 +325,9 @@ val input_line : BatIO.input -> string
     @raise End_of_file if the end of the file is reached
     at the beginning of line. *)
 
-val input : BatIO.input -> string -> int -> int -> int
-(** [input ic buf pos len] reads up to [len] characters from
-    the given channel [ic], storing them in string [buf], starting at
+val input : BatIO.input -> Bytes.t -> int -> int -> int
+(** [input ic buf pos len] reads up to [len] characters from the given
+    channel [ic], storing them in byte sequence [buf], starting at
     character number [pos].
     It returns the actual number of characters read, between 0 and
     [len] (inclusive).
@@ -334,15 +340,15 @@ val input : BatIO.input -> string -> int -> int -> int
     if desired.  (See also {!Pervasives.really_input} for reading
     exactly [len] characters.)
     @raise Invalid_argument if [pos] and [len]
-    do not designate a valid substring of [buf]. *)
+    do not designate a valid subsequence of [buf]. *)
 
-val really_input : BatIO.input -> string -> int -> int -> unit
-(** [really_input ic buf pos len] reads [len] characters from channel [ic],
-    storing them in string [buf], starting at character number [pos].
-    @raise End_of_file if the end of file is reached before [len]
-    characters have been read.
+val really_input : BatIO.input -> Bytes.t -> int -> int -> unit
+(** [really_input ic buf pos len] reads [len] characters from channel
+    [ic], storing them in byte sequence [buf], starting at character
+    number [pos].  @raise End_of_file if the end of file is reached
+    before [len] characters have been read.
     @raise Invalid_argument if
-    [pos] and [len] do not designate a valid substring of [buf]. *)
+    [pos] and [len] do not designate a valid subsequence of [buf]. *)
 
 val input_byte : BatIO.input -> int
 (** Same as {!Pervasives.input_char}, but return the 8-bit integer representing
