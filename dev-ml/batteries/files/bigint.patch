commit 44a3a21e421a3be6b8d5cd337b68f0c094bfae11
Author: Gabriel Scherer <gabriel.scherer@gmail.com>
Date:   Sun Apr 17 13:50:57 2016 -0400

    safe-string: make Big_int safe

diff --git a/src/batBig_int.mliv b/src/batBig_int.mliv
index 4ce5b0e0..4693f08c 100644
--- a/src/batBig_int.mliv
+++ b/src/batBig_int.mliv
@@ -345,7 +345,7 @@ val nat_of_big_int : big_int -> Nat.nat
 val big_int_of_nat : Nat.nat -> big_int
 val base_power_big_int: int -> int -> big_int -> big_int
 val sys_big_int_of_string: string -> int -> int -> big_int
-val round_futur_last_digit : string -> int -> int -> bool
+val round_futur_last_digit : Bytes.t -> int -> int -> bool
 val approx_big_int: int -> big_int -> string
 ##V>=4.3##val round_big_int_to_float: big_int -> bool -> float
 
diff --git a/src/batBig_int.mlv b/src/batBig_int.mlv
index 0e4279c2..c9f798ee 100644
--- a/src/batBig_int.mlv
+++ b/src/batBig_int.mlv
@@ -21,11 +21,15 @@
 
 
 let big_int_base_default_symbols =
-  let s = Bytes.create (10 + 26*2) in
-  let set off c k = Bytes.set s k (char_of_int (k - off + (int_of_char c))) in
-  for k = 0 to String.length s - 1 do
-    if k < 10 then set  0 '0' k else if k < 36 then set 10 'a' k else set 36 'A' k
-  done; s
+  let symbol offset base k =
+    char_of_int (k - offset + (int_of_char base)) in
+  String.init (10 + 26*2) (fun k ->
+    if k < 10
+    then symbol 0 '0' k
+    else if k < 36
+    then symbol 10 'a' k
+    else symbol 36 'A' k
+  )
 
 
 let to_string_in_custom_base
@@ -65,7 +69,7 @@ let to_string_in_custom_base
   done;
   addchar symbols.[int_of_big_int !n];
   if isnegative then addchar '-';
-  String.sub buff (!curr + 1) !count
+  Bytes.sub_string buff (!curr + 1) !count
 
 let to_string_in_base b n =
   if b <= 1 || b > 36 then invalid_arg
