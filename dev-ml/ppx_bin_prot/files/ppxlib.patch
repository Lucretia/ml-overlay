commit 6b9b0ccc194e0a2dd962a3a30778046870e365c7
Author: Thomas Refis <thomas.refis@gmail.com>
Date:   Thu Apr 19 10:04:27 2018 +0100

    v0.11.117.03+59

diff --git a/shape/src/bin_shape_expand.ml b/shape/src/bin_shape_expand.ml
index 872f299..549c48a 100644
--- a/shape/src/bin_shape_expand.ml
+++ b/shape/src/bin_shape_expand.ml
@@ -93,8 +93,8 @@ let of_type : (
     | Rtag (_,_,true,_::_)
     | Rtag (_,_,false,_::_::_) ->
       raise_errorf ~loc "unsupported '&' in row_field: %s" (string_of_core_type typ_for_error)
-    | Rtag (s,_,true,[]) -> [%expr Bin_prot.Shape.constr [%e estring ~loc s] None]
-    | Rtag (s,_,false,[t]) -> [%expr Bin_prot.Shape.constr [%e estring ~loc s] (Some [%e traverse t])]
+    | Rtag ({ txt; _},_,true,[]) -> [%expr Bin_prot.Shape.constr [%e estring ~loc txt] None]
+    | Rtag ({ txt; _},_,false,[t]) -> [%expr Bin_prot.Shape.constr [%e estring ~loc txt] (Some [%e traverse t])]
     | Rtag (_,_,false,[]) ->
       raise_errorf ~loc "impossible row_type: Rtag (_,_,false,[])"
     | Rinherit t ->
diff --git a/shape/test/examples.mlt b/shape/test/examples.mlt
index a5acd94..cdaf627 100644
--- a/shape/test/examples.mlt
+++ b/shape/test/examples.mlt
@@ -149,7 +149,7 @@ end
 
 [%%expect{|
 Line _, characters 44-47:
-Error: ppxlib_type_conv: generator 'bin_shape' doesn't accept argument 'floob'
+Error: Ppxlib.Deriving: generator 'bin_shape' doesn't accept argument 'floob'
 |}]
 
 module Shapeless = struct
diff --git a/src/ppx_bin_prot.ml b/src/ppx_bin_prot.ml
index d4bed37..1654f1d 100644
--- a/src/ppx_bin_prot.ml
+++ b/src/ppx_bin_prot.ml
@@ -243,7 +243,7 @@ module Generate_bin_size = struct
       List.fold_left row_fields ~init:[] ~f:(fun acc rf ->
         match rf with
         | Rtag (_, _, true, _) -> acc
-        | Rtag (cnstr, _, false, tp :: _) ->
+        | Rtag ({ txt = cnstr; _ }, _, false, tp :: _) ->
           let size_args =
             match bin_size_type full_type_name tp.ptyp_loc tp with
             | `Fun fun_expr -> eapply ~loc fun_expr [ [%expr args ] ]
@@ -518,13 +518,13 @@ module Generate_bin_write = struct
   and bin_write_variant full_type_name loc row_fields =
     let matchings =
       List.map row_fields ~f:(function
-        | Rtag (cnstr, _, true, _) | Rtag (cnstr, _, false, []) ->
+        | Rtag ({txt = cnstr; _ }, _, true, _) | Rtag ({ txt = cnstr; _ }, _, false, []) ->
           case ~lhs:(ppat_variant  ~loc cnstr None) ~guard:None
             ~rhs:[%expr
               Bin_prot.Write.bin_write_variant_int buf ~pos
                 [%e eint ~loc (Ocaml_common.Btype.hash_variant cnstr) ]
             ]
-        | Rtag (cnstr, _, false, tp :: _) ->
+        | Rtag ({ txt = cnstr; _ }, _, false, tp :: _) ->
           let write_args =
             match bin_write_type full_type_name tp.ptyp_loc tp with
             | `Fun fun_expr -> [%expr [%e fun_expr] buf ~pos args ]
@@ -864,7 +864,7 @@ module Generate_bin_read = struct
           | `Expr expr -> expr
           | `None -> raise_nvm
       and loop_one next t = function
-        | Rtag (cnstr, _, is_constant, tps) ->
+        | Rtag ({ txt = cnstr; _ }, _, is_constant, tps) ->
           let rhs =
             match is_constant, tps with
             | false, arg_tp :: _ ->
@@ -877,7 +877,8 @@ module Generate_bin_read = struct
               pexp_variant ~loc cnstr None
           in
           let this_mc =
-            case ~lhs:(pint ~loc (Ocaml_common.Btype.hash_variant cnstr)) ~guard:None ~rhs
+            case ~lhs:(pint ~loc (Ocaml_common.Btype.hash_variant cnstr))
+              ~guard:None ~rhs
           in
           add_mc next this_mc t
         | Rinherit ty ->
