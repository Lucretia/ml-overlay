Index: ocamldap-2.2/src/lber.ml
===================================================================
--- ocamldap-2.2.orig/src/lber.ml
+++ ocamldap-2.2/src/lber.ml
@@ -194,14 +194,14 @@ let readbyte_of_readfun rfun =
             String.blit iresult 0 result !total nbytes_to_read;
             total := !total + nbytes_to_read
         done;
-        result
+        Bytes.to_string result
     )
     else if not peek then (
       if length <= !buf_len - !buf_pos then (
-        let result = String.sub buf !buf_pos length in
+        let result = Bytes.sub buf !buf_pos length in
           buf_pos := !buf_pos + length;
           peek_pos := !buf_pos;
-          result
+          Bytes.to_string result
       )
       else (
         let result = String.create length in
@@ -212,31 +212,31 @@ let readbyte_of_readfun rfun =
         in
         let nbytes_to_read = length - nbytes_in_buffer in
           if nbytes_in_buffer > 0 then
-            String.blit buf !buf_pos result 0 nbytes_in_buffer;
+            Bytes.blit buf !buf_pos result 0 nbytes_in_buffer;
           if nbytes_to_read > 0 then (
             let nbytes_read = read_at_least_nbytes buf 0 bufsize nbytes_to_read in
-              String.blit buf 0 result nbytes_in_buffer nbytes_to_read;
+              Bytes.blit buf 0 result nbytes_in_buffer nbytes_to_read;
               buf_pos := nbytes_to_read;
               buf_len := nbytes_read;
               peek_pos := !buf_pos;
               peek_buf_len := 0;
-              result
+              Bytes.to_string result
           )
           else (
-            String.blit buf 0 buf (!buf_pos + length) (nbytes_really_in_buffer - length);
+            Bytes.blit buf 0 buf (!buf_pos + length) (nbytes_really_in_buffer - length);
             buf_len := (nbytes_really_in_buffer - length);
             buf_pos := 0;
             peek_pos := !buf_pos;
             peek_buf_len := 0;
-            result
+            Bytes.to_string result
           )
       )
     ) (* if not peek *)
     else (
       if length <= (!buf_len + !peek_buf_len) - !peek_pos then (
-        let result = String.sub buf !peek_pos length in
+        let result = Bytes.sub buf !peek_pos length in
           peek_pos := !peek_pos + length;
-          result
+          Bytes.to_string result
       )
       else (
         if length + !peek_pos > 2 * bufsize then raise (Readbyte_error Peek_error);
@@ -244,17 +244,17 @@ let readbyte_of_readfun rfun =
         let nbytes_in_buffer = (!buf_len + !peek_buf_len) - !peek_pos in
         let nbytes_to_read = length - nbytes_in_buffer in
         let read_start_pos = !peek_pos + nbytes_in_buffer in
-          String.blit buf !peek_pos result 0 nbytes_in_buffer;
+          Bytes.blit buf !peek_pos result 0 nbytes_in_buffer;
           let nbytes_read =
             read_at_least_nbytes buf
               read_start_pos
               (bufsize - (!buf_len + !peek_buf_len))
               nbytes_to_read
           in
-            String.blit buf read_start_pos result nbytes_in_buffer nbytes_read;
+            Bytes.blit buf read_start_pos result nbytes_in_buffer nbytes_read;
             peek_buf_len := !peek_buf_len + nbytes_read;
             peek_pos := !peek_pos + length;
-            result
+            Bytes.to_string result
       )
     )
   in
Index: ocamldap-2.2/src/ldap_dn.ml
===================================================================
--- ocamldap-2.2.orig/src/ldap_dn.ml
+++ ocamldap-2.2/src/ldap_dn.ml
@@ -83,7 +83,7 @@ let escape_value valu =
             if (int_of_char c) < (int_of_char ' ') ||
                (int_of_char c) > (int_of_char '~')
             then begin
-              Buffer.add_string buf ("\\" ^ (hexpair_of_char c));
+              Buffer.add_string buf ("\\" ^ (Bytes.to_string (hexpair_of_char c)));
               escape strm buf
             end
             else begin
Index: ocamldap-2.2/src/ldap_funclient.ml
===================================================================
--- ocamldap-2.2.orig/src/ldap_funclient.ml
+++ ocamldap-2.2/src/ldap_funclient.ml
@@ -86,7 +86,7 @@ let send_message con msg =
     try
       while !written < len
       do
-        written := ((write con.socket e_msg
+        written := ((write con.socket (Bytes.of_string e_msg)
                        !written (len - !written)) +
                     !written)
       done
Index: ocamldap-2.2/src/ldap_funserver.ml
===================================================================
--- ocamldap-2.2.orig/src/ldap_funserver.ml
+++ ocamldap-2.2/src/ldap_funserver.ml
@@ -99,7 +99,7 @@ let send_message si conn_id op_nr fd msg
     try
       while !written < len
       do
-        written := ((write fd e_msg
+        written := ((write fd (Bytes.of_string e_msg)
                        !written (len - !written)) +
                       !written)
       done;
